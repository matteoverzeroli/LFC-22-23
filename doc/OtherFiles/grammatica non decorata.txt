parseCircuit
	:	
		prologueRule
		componentRule*
		EOF
	;
prologueRule 
	:	versionRule
		sheetRule
	;
versionRule 
	:	
		v=VERSION 
		ver = INTEGER
	;
	
sheetRule
	:	
		s=SHEET i1=INTEGER i2=INTEGER i3=INTEGER
	;
	
componentRule
	:	wireRule
		| symbol = symbolRule
		| symattrRule
		| flagRule
		| windowRule
		| iopinRule
	;
wireRule
	:
		w=WIRE i1=INTEGER i2=INTEGER i3=INTEGER i4=INTEGER
	;
	
flagRule
	:	
		f=FLAG i1=INTEGER i2=INTEGER v=(INTEGER | ID | reservedWordRule)
	;
	
windowRule
	:	
		w=WINDOW 
		i1=INTEGER 
		i2=INTEGER 
		i3=INTEGER 
		id = ID
		i4=INTEGER
	;
iopinRule
	:
		i=IOPIN
		i1=INTEGER
		i2=INTEGER
		id = ID 		
	;
symbolRule returns[Token symbol]
	:
		s=SYMBOL 
		symbolType = ID
		i1=INTEGER 
		i2=INTEGER 
		rotType = ID
	;
symattrRule
	:	
	    	s=SYMATTR id1=ID
			( id2=ID
				( id3=ID
				| (attrRuleNoId attrRule[id1]*)?)
			| i=INTEGER
			| f=FLOAT
			| r = reservedWordRule)
	;
attrRuleNoId
	:
		a=ASSIGN
		v=(INTEGER | FLOAT | STRING | ID | reservedWordRule)
	;
attrRule [Token id1]
	: 	
		id2 = ID
		a=ASSIGN
		v=(INTEGER | FLOAT | STRING | ID | reservedWordRule)		
	;

reservedWordRule returns [Token word]
	:	
		v=(VERSION | SHEET | WIRE | FLAG | WINDOW | SYMBOL | SYMATTR | ASSIGN | IOPIN)
	;

fragment 
LETTER : 'a'..'z'|'A'..'Z';
fragment 
DIGIT : '0'..'9';
fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
fragment
SPECIALCHAR: '\u0021'..'\u002F' |'\u003A'..'\u003C'|'\u003E'..'\u0040'|'\u005B'..'\u0060' //punctuation and symbols. '=' removed for STRING TOKEN
	     |'\u007B'..'\u007E'|'\u00A1'..'\u017F' //latin punctuation and symbols
	     |'\u0370'..'\u03FF' //Greek alphabet
	     |'\u0400'..'\u04FF' //Cyrillic alphabet
	     ;
	     
/* case insensitive lexer matching */
fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');

INTEGER:		('-')?DIGIT+;
FLOAT
    :   DIGIT+ '.' DIGIT* EXPONENT?
    |   '.' DIGIT+ EXPONENT?
    |   DIGIT+ EXPONENT
    ;
    
    
//KEYWORD 
VERSION	:	V E R S I O N ;
SHEET	:	S H E E T;
WIRE	:	W I R E;
SYMBOL	:	S Y M B O L;
SYMATTR	:	S Y M A T T R;
ASSIGN	:	'=';
WINDOW 	:	W I N D O W;
FLAG 	:	F L A G;
IOPIN	:	I O P I N;
	
WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        )+ {$channel=HIDDEN;}
    ;
    
STRING	:	'"' ~('"')* '"';

ID	:	(LETTER | DIGIT | SPECIALCHAR)(LETTER | DIGIT | SPECIALCHAR)*;

ERROR_TK		: . ; 